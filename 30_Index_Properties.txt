### INDEX PROPERTIES ###

##Index Properties
MongoDB mendukung properties di index.
Istilah properties di Index mungkin agak sedikit membingungkan, sederhananya adalah menambahkan kemampuan tertentu terhadap index yang kita buat.

##TTL Index
TTL singkatan dari  Time To Live, yaitu waktu untuk hidup.
TTL Index digunakan sebagai waktu hidup document di collection, artinya data akan hilang dalam kurun waktu tertentu secara otomatis.
TTL Index hanya dapat digunakan di field dengan tipe data Date.
Background proses di  MongoDB akan secara regular melakukan penghapusan data secara otomatis.
Sayangnya, proses background tersebut berjalan setiap 60 detik sekali.

#Create session collection
db.createCollection("sessions");

#Create TTL index
db.sessions.createIndex({
    createdAt: 1
}, {
    expireAfterSeconds: 10
})

#Will expire after 10 seconds, but background job every 60 seconds
db.sessions.insertOne({
    _id: 1,
    session: "Session 1",
    createdAt: new Date()
})


##Unique Index
Unique Index memastikan bahwa field-field di index tersebut tidak menyimpan data duplicate.
Contohnya, di MongoDB, field _id secara otomatis merupakan unique index, sehingga kita tidak bisa membuat document dengan field _id yang sama.

#Create unique index in email
db.customers.createIndex({
    email: 1
}, {
    unique: true,                   #wajib ditambahkan sparse, jika tidak yang null akan dianggap duplikat dan menjadi error
    sparse: true                    #index hanya diterapkan pada dokumen yang memiliki field yang ada di index
})

#Update customers set email = ? where _id = ?
db.customers.updateOne({
    _id: "eko"
}, {
    $set: {
        email: "eko@example.com"
    }
})

#Error duplicate email
db.customers.updateOne({
    _id: "joko"
}, {
    $set: {
        email: "eko@example.com"
    }
})


##Case Insensitive
Secara default, saat kita membuat index, maka data akan disimpan sebagai case sensitive.
Namun, kadang ada kasus kita ingin membuat data yang di index menjadi case insensitive.
Kita bisa mengubah nilai collation strength saat membuat index.

#Create unique index in full_name
db.customers.createIndex({
    full_name: 1
}, {
    collation: {
        locale: 'en',
        strength: 2                     #case 1 = sensitive, case 2 = insensitive
    }
})

#Not using index
db.customers.find({
    full_name : "eko Kurniawan Khannedy"
});

#Using index
db.customers.find({
    full_name : "EKO KURNIAWAN KHANNEDY"
}).collation({
    locale: 'en',
    strength: 2                         #case 1 = sensitive, case 2 = insensitive
});


##Partial
Secara default, saat kita membuat jenis query apapun yang menggunakan query ke index, secara otomatis mongodb akan menggunakan index.
Namun kita bisa menambahkan kondisi tertentu agar index hanya digunakan ketika kita menggunakan kriteria tertentu ketika melakukan query.
Fitur ini bernama partial filter.

#Create partial index
db.products.createIndex({
    price: 1
}, {
    partialFilterExpression: {
        stock: {
            $gt: 0
        }
    }
})

#Debug query with partial index
db.products.find({
    price: 2500
})

db.products.find({
    price: {
        $eq: 2500
    },
    stock: {
        $gt: 0                          #kalo tidak ada stok lebih dari 0, maka tidak akan menggunakan index
    }
})
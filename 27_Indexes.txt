### INDEXES ###

##Indexes
Index adalah fitur di MongoDB untuk mengefisienkan proses query. Tanpa Index, MongoDB harus melakukan proses query dengan cara collection scan (mencari keseluruh data dari awal sampai akhir).
Jika terdapat Index pada collection MongoDB, MongoDB bisa menggunakan Index untuk mendapatkan data, tanpa harus melakukan pencarian keseluruh document.
Index menggunakan struktur data khusus ketika menyimpan data, defaultnya menggunakan BTREE (balanced tree).
Index menyimpan spesifik field, lalu mengurutkan data field tersebut. Hal ini tidak hanya mempermudah ketika proses pencarian, namun mempermudah ketika kita butuh melakukan pencarian dalam bentuk range document (seperti paging).
Secara sederhana, Index di MongoDB, cara kerjanya sama seperti Index di Relational DB.

##Create Index Function
---------------------------------------------------------------------
|           Function            |          Keterangan               |
|-------------------------------|-----------------------------------|
| db.<collection>.createIndex() | Membuat index di collection       |
|-------------------------------|-----------------------------------|
| db.<collection>.getIndexes()  | Melihat semua index di collection |
|-------------------------------|-----------------------------------|
| db.<collection>.dropIndex()   | Menghapus index di collection     |
|-------------------------------|-----------------------------------|

##Single Field Index
Secara default, field _id di MongoDB sudah di index secara otomatis, jadi kita tidak perlu membuat index lagi secara manual untuk field _id.
MongoDB mendukung penuh pembuatan index di semua field yang ada di document. Dengan begitu, ini bisa mempercepat proses query di MongoDB untuk query terhadap field tersebut.
Saat membuat index, kita bisa menggunakan nilai 1 untuk ascending, dan -1 untuk descending.

#Create index at 'category' in products collection
db.products.createIndex({
    category: 1
})

#Get all indexes in products collection
db.products.dropIndex("category_1")

#Find products by 'category' (will use index)
db.products.find({
    category: 'food'
})

#Debugging with index
db.products.find({
    category: 'food'
}).explain()

db.products.find({
    category: 'food'
}).sort({
    category:1                          #asc
}).explain()

db.products.find({
    category: 'food'
}).sort({
    category:-1                         #desc
}).explain()

#Debugging without index
db.products.find({
    tags: 'samsung'
}).explain()

db.products.find({
    category: 'food',
    tags: "samsung"
}).explain()


##Compound Indexes
Jika kita butuh melakukan query terhadap lebih dari satu field, kita juga bisa membuat index terhadap lebih dari satu field, atau disebut Compound Index.
MongoDB membatasi pembuatan maksimal field yang bisa dibuat di compound index adalah 32 field.

#Create index at 'stock' and 'tags' in products collection
db.products.createIndex({
    stock: 1,
    tags: 1
})

#Find products by 'stock' and 'tags' (will use index)
db.products.find({
    stock: 10,
    tags: "popular"
})

#Debugging with index
db.products.find({
    stock: 10,
    tags: "popular"
}).explain()

db.products.find({
    stock: 10
}).explain()

#Debugging without index
db.products.find({
    tags: 'popular'
}).explain()

db.products.find({
    name: "samsung",
    tags: "popular"
}).explain()


##Index Strategy
1. Buat index untuk mendukung performa query:
   - Gunakan single index, jika kita hanya melakukan query terhadap satu field saja.
   - Gunakan compound index, jika kita sering melakukan query ke field pertama, atau kombinasi field pertama dan kedua, atau pertama dan kedua dan seterusnya.
2. Buat index untuk mengurutkan hasil query.
3. Sering-seringlah menggunakan function explain() untuk mengecek apakah query kita sudah di optimize dengan index atau belum.
4. Jika kita buat compound index (a, b, c), artinya kisa bisa mencari menggunakan query a, a b, dan a b c.
